[{"D:\\dashboard\\front\\faculty-dashboard\\final\\src\\index.js":"1","D:\\dashboard\\front\\faculty-dashboard\\final\\src\\App.js":"2","D:\\dashboard\\front\\faculty-dashboard\\final\\src\\components\\Search\\MultiRangeSlider.js":"3","D:\\dashboard\\front\\faculty-dashboard\\final\\src\\components\\Search\\SearchContainer.js":"4","D:\\dashboard\\front\\faculty-dashboard\\final\\src\\components\\Navbar.js":"5","D:\\dashboard\\front\\faculty-dashboard\\final\\src\\components\\Search\\Select.js":"6","D:\\dashboard\\front\\faculty-dashboard\\final\\src\\components\\Search\\Input.js":"7","D:\\dashboard\\front\\faculty-dashboard\\final\\src\\components\\Search\\Results\\ResultsList.js":"8","D:\\dashboard\\front\\faculty-dashboard\\final\\src\\components\\Search\\Results\\individuasl.js":"9"},{"size":497,"mtime":1635143829630,"results":"10","hashOfConfig":"11"},{"size":435,"mtime":1636556371895,"results":"12","hashOfConfig":"11"},{"size":3790,"mtime":1636556193817,"results":"13","hashOfConfig":"11"},{"size":5764,"mtime":1636557339769,"results":"14","hashOfConfig":"11"},{"size":598,"mtime":1635143829620,"results":"15","hashOfConfig":"11"},{"size":861,"mtime":1636556170779,"results":"16","hashOfConfig":"11"},{"size":3073,"mtime":1636533833343,"results":"17","hashOfConfig":"11"},{"size":3283,"mtime":1636557345337,"results":"18","hashOfConfig":"11"},{"size":5681,"mtime":1636557082612,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},"1b1c6i7",{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"23"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"23"},"D:\\dashboard\\front\\faculty-dashboard\\final\\src\\index.js",["43"],"import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport MultiRangeSlider from './components/Search/MultiRangeSlider'\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n    \r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n",["44","45"],"D:\\dashboard\\front\\faculty-dashboard\\final\\src\\App.js",[],"D:\\dashboard\\front\\faculty-dashboard\\final\\src\\components\\Search\\MultiRangeSlider.js",["46","47","48"],"import React, { useCallback, useEffect, useState, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import \"../../MultiRangeSlider.css\";\r\n\r\nconst MultiRangeSlider = (props) => {\r\n  const { min, max, onChange, id } = props\r\n  const [minVal, setMinVal] = useState(min);\r\n  const [maxVal, setMaxVal] = useState(max);\r\n  const minValRef = useRef(min);\r\n  const maxValRef = useRef(max);\r\n  const [values, setValues] = useState({\r\n    min: minValRef,\r\n    max: maxValRef\r\n  })\r\n  const range = useRef(null);\r\n\r\n  // Convert to percentage\r\n  const getPercent = useCallback(\r\n    (value) => Math.round(((value - min) / (max - min)) * 100),\r\n    [min, max]\r\n  );\r\n\r\n  // Set width of the range to decrease from the left side\r\n  useEffect(() => {\r\n    const minPercent = getPercent(minVal);\r\n    const maxPercent = getPercent(maxValRef.current);\r\n\r\n    if (range.current) {\r\n      range.current.style.left = `${minPercent}%`;\r\n      range.current.style.width = `${maxPercent - minPercent}%`;\r\n    }\r\n    setValues(prevState => ({\r\n      ...prevState,\r\n      min: minValRef\r\n    }))\r\n  }, [minVal, getPercent]);\r\n\r\n  // Set width of the range to decrease from the right side\r\n  useEffect(() => {\r\n    const minPercent = getPercent(minValRef.current);\r\n    const maxPercent = getPercent(maxVal);\r\n\r\n    if (range.current) {\r\n      range.current.style.width = `${maxPercent - minPercent}%`;\r\n    }\r\n    setValues(prevState => ({\r\n      ...prevState,\r\n      max: maxValRef\r\n    }))\r\n  }, [maxVal, getPercent]);\r\n\r\n  // Get min and max values when their state changes\r\n  // useEffect(() => {\r\n  //   onChange({ min: minVal, max: maxVal });\r\n  // }, [minVal, maxVal, onChange]);\r\n\r\n  useEffect(()=>{\r\n    // console.log(\"Valuessss\\n\", values)\r\n    props.list(prop=> ({\r\n      ...prop,\r\n      [id]:  {min: minValRef, max: maxValRef}\r\n    }))\r\n  }, [values])\r\n  // console.log(\"min and max\", minValRef, maxValRef);\r\n  return (\r\n    \r\n    <div className=\"search-input-groups\" style={{ display: 'flex', flexDirection: 'column', justifyContent:'space-around'}} >\r\n      <label>{props['label']}</label>\r\n    <div className=\"container\" style={{width: '100%', marginTop: '10px'}} >\r\n      <input\r\n        type=\"range\"\r\n        min={min}\r\n        max={max}\r\n        value={minVal}\r\n        style={{marginTop: '20px'}}\r\n        onChange={(event) => {\r\n          onChange(event.target.className.split(' ').slice(-1).pop(), Number(event.target.value))\r\n          console.log(event.target.className.split(' ').slice(-1))\r\n          const value = Math.min(Number(event.target.value), maxVal - props.step);\r\n          setMinVal(value);\r\n          minValRef.current = value;\r\n        }}\r\n        className={`thumb thumb--left ${id}`}\r\n        style={{ zIndex: minVal > max - 100 && \"5\" }}\r\n        step= {0.1}\r\n      />\r\n      <input\r\n        type=\"range\"\r\n        min={min}\r\n        max={max}\r\n        value={maxVal}\r\n        className={id}\r\n        onChange={(event) => {\r\n          onChange(event.target.className.split(' ').slice(-1).pop(), Number(event.target.value))\r\n\r\n          const value = Math.max(Number(event.target.value), minVal + props.step);\r\n          setMaxVal(value);\r\n          maxValRef.current = value;\r\n        }}\r\n        step= {0.1}\r\n        className={`thumb thumb--right ${id}`}\r\n\r\n      />\r\n\r\n      <div className=\"slider\">\r\n        <div className=\"slider__track\" />\r\n        <div ref={range} className=\"slider__range\" />\r\n        <div className=\"slider__left-value\">{minVal}</div>\r\n        <div className=\"slider__right-value\">{maxVal}</div>\r\n      </div>\r\n    </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nMultiRangeSlider.propTypes = {\r\n  min: PropTypes.number.isRequired,\r\n  max: PropTypes.number.isRequired,\r\n  onChange: PropTypes.func.isRequired\r\n};\r\n\r\nexport default MultiRangeSlider;\r\n","D:\\dashboard\\front\\faculty-dashboard\\final\\src\\components\\Search\\SearchContainer.js",[],"D:\\dashboard\\front\\faculty-dashboard\\final\\src\\components\\Navbar.js",[],"D:\\dashboard\\front\\faculty-dashboard\\final\\src\\components\\Search\\Select.js",[],"D:\\dashboard\\front\\faculty-dashboard\\final\\src\\components\\Search\\Input.js",[],"D:\\dashboard\\front\\faculty-dashboard\\final\\src\\components\\Search\\Results\\ResultsList.js",["49","50"],"import React, { useState,useEffect } from \"react\";\r\n\r\nimport Individual from './individuasl';\r\n\r\n\r\nexport default function ResultsList({ list, updateId, updateIndex, Index }) {\r\n  const [sorting,setsort]=useState(0)\r\n  let vals;\r\n  vals=list.slice(Index.start, Index.end)\r\n  const [data,setData]=useState(vals[0])\r\n  const [individualIndex,setIndividualindex]=useState(0)\r\n  \r\n  useEffect(()=>{\r\n    updateIndex({\r\n      start:0,\r\n      end:18\r\n    })\r\n  },[list])\r\n\r\nuseEffect(()=>{\r\n  vals=list.slice(Index.start, Index.end)\r\n  setData(vals[0])\r\n  setIndividualindex(0)\r\n  \r\n},[list,Index.start,sorting])  \r\n  \r\n  if(!sorting){\r\n    list.sort((a, b) => a.faculty_id.localeCompare(b.faculty_id))\r\n\r\n  }\r\n  if(sorting){\r\n    list.sort((a, b) => b.faculty_id.localeCompare(a.faculty_id))\r\n\r\n  }\r\n\r\n\r\n  const changeIndexHandler = (e) => {\r\n    setIndividualindex(0)\r\n    \r\n    let operation = e.target.getAttribute(\"data-operation\");\r\n    if (operation === \"-\")\r\n      if (Index.start > 0)\r\n        updateIndex({\r\n          start: Index.start - 18,\r\n          end: Index.end - 18,\r\n        });\r\n      else if (Index.end <= list.length)\r\n        updateIndex({\r\n          start: 0,\r\n          end: 18,\r\n        });\r\n      else\r\n        updateIndex({\r\n          start: Index.start,\r\n          end: Index.end,\r\n        });\r\n    else if (Index.end <= list.length)\r\n      updateIndex({\r\n        start: Index.start + 18,\r\n        end: Index.end + 18,\r\n      });\r\n      \r\n  };\r\n\r\n \r\n  list=list.map(list=>{\r\n   delete list.id;\r\n   delete list.central_responsibility;\r\n   delete list.About;\r\n   delete list.status;\r\n   delete list.Faculty_list;\r\n   delete list.picture;\r\n   delete list.Search;\r\n   return list\r\n  })\r\n\r\n  \r\n\r\n  \r\n  return (\r\n    <div className=\"display\">\r\n    <div className=\"results-list-container\">\r\n      <div className=\"results-list-page-nav\">\r\n        <p>Results </p>\r\n        <button data-operation=\"-\" onClick={changeIndexHandler}>\r\n          &lt;\r\n        </button>{\" \"}\r\n        {Index.start} - {Index.end}\r\n        <button data-operation=\"+\" onClick={changeIndexHandler}>\r\n          &gt;\r\n        </button>{\" \"}\r\n      </div>\r\n      <h3 style={{backgroundColor:'rgb(25, 140, 255)',\r\n    color:'white',\r\n    textAlign:'center',\r\n    padding:'10px'}}onClick={()=>setsort(!sorting)}>FACULTY LIST</h3>\r\n\r\n      {list.length > 0 ? (\r\n        <div className=\"results\">\r\n        \r\n        <ul>\r\n          {vals.map((x,index) => (\r\n          \r\n            <li key={index}onClick={()=>{setData(x)\r\n              setIndividualindex(index)\r\n            }}>\r\n              <p>\r\n              <img src=\"https://upload.wikimedia.org/wikipedia/en/7/77/Bannari_Amman_Institute_of_Technology_logo.png\"  alt=\"BANNARI AMMAN INSTITUTE OF TECHNOLOGY\" style={{height:'30px',width:'50px',padding:'0px'}}/>\r\n              <span style={{textAlign:'center',margin:'10px',height:'44px'}}> {`${x.faculty_id} - ${x.name}`}</span></p>\r\n            </li>\r\n           \r\n          ))}\r\n        </ul>\r\n        </div>\r\n      ) : (\r\n        <span>No Data Found</span>\r\n        \r\n      )}\r\n\r\n\r\n    </div><br/>\r\n\r\n    {data===undefined?'':<Individual data={data} list={list} vals={vals} setData={setData} individualIndex={individualIndex} setIndividualindex={setIndividualindex}/>}\r\n\r\n    </div>\r\n  );\r\n}\r\n","D:\\dashboard\\front\\faculty-dashboard\\final\\src\\components\\Search\\Results\\individuasl.js",["51"],"import React, { useEffect, useState } from \"react\";\r\n// import axios from \"axios\";\r\nimport {RiFileDownloadFill} from 'react-icons/ri';\r\nimport {FcDownload} from 'react-icons/fc';\r\n// import Individual from './individuasl';\r\nimport jsPDF from 'jspdf';\r\nimport * as autoTable from 'jspdf-autotable';\r\nimport * as FileSaver from 'file-saver';\r\nimport * as XLSX from 'xlsx';\r\n\r\nexport default function Individual({ data,list ,vals,setData,individualIndex,setIndividualindex}) {\r\n  const [fieldGroup, setFieldGroup ] = useState([])\r\n\r\n  \r\n\r\n  useEffect(()=>{\r\n    // setIndividualindex(0)\r\n    setFieldGroup(Object.keys(data).filter((a)=>a.includes('Feedback') || a.includes('FRP') || a.includes('FAP')|| a.includes('Score')|| a.includes('FRS')))\r\n  }, [data])\r\n  const changeHandler=(e)=>{\r\n    let operation = e.target.getAttribute(\"data-operation\");\r\n    if (operation === \"+\"){\r\n\r\n      if(individualIndex>=17 || individualIndex>=vals.length-1){\r\n        setIndividualindex(0)\r\n        setData(vals[0])\r\n      }\r\nelse{\r\n  setIndividualindex(individualIndex+1)\r\n\r\n\r\n  setData(vals[individualIndex+1])\r\n\r\n}    \r\n}\r\nif (operation === \"-\"){\r\n  if(individualIndex<=0){\r\n    setIndividualindex(vals.length-1)\r\n    setData(vals[vals.length-1])\r\n  }\r\nelse{\r\nsetIndividualindex(individualIndex-1)\r\n\r\n\r\nsetData(vals[individualIndex-1])\r\n\r\n}    \r\n   \r\n}\r\n  }\r\n\r\n  const generatePdf=()=>{\r\n    var doc = new jsPDF('landscape','px','a4');\r\n    \r\n    doc.autoTable({\r\n      styles: {halign:'center',valign:\"middle\" },\r\n      theme:'grid',\r\n      headStyle:{fillColor:(165,42,42)\r\n      },\r\n      \r\n      head: [['FACULTY_ID','FACULTY_NAME','DEPARTMENT','DESIGNATION','FAP_2021','FRS_2021','FRP_2021','FEEDBACK_2021']],\r\n        \r\n        body:list.map(list=>[[list.faculty_id],[list.name],[list.department],[list.designation],[list.FAP_2021_Score],[list.FRS_2021],[list.FRP_2021],[list.Feedback_2021_Score]]),\r\n       \r\n        \r\n      })\r\n    \r\n\r\n    doc.save('table.pdf'); \r\n\r\n  };\r\n\r\n  const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n    const fileExtension = '.xlsx';\r\n    const fileName=\"download\"\r\n\r\n    const exportToCSV = (list, fileName) => {\r\n        const ws = XLSX.utils.json_to_sheet(list);\r\n        const wb = { Sheets: { 'data': ws }, SheetNames: ['data'] };\r\n        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n        const data = new Blob([excelBuffer], {type: fileType});\r\n        FileSaver.saveAs(data, fileName + fileExtension);\r\n    }\r\n    \r\n\r\n  return (\r\n      \r\n    <div className=\"results-data-container\">\r\n            <div className=\"results-list-page-nav\">\r\n\r\n      <button data-operation=\"-\" onClick={changeHandler}>\r\n          &lt; {individualIndex+1}\r\n        </button>{\" \"}\r\n        <button data-operation=\"+\" onClick={changeHandler}>\r\n         - {vals.length}&gt;\r\n        </button>{\" \"}\r\n        </div>\r\n      <center><img src=\"https://upload.wikimedia.org/wikipedia/en/7/77/Bannari_Amman_Institute_of_Technology_logo.png\"  alt=\"BANNARI AMMAN INSTITUTE OF TECHNOLOGY\" style={{width:'120px',height:'70px',textAlign:'center',borderRadius:'50%',objectFit:'contain'}}/></center>\r\n      <span className=\"result-data-name\">{data.name}</span>\r\n      <span className=\"result-data-department\">{data.department}</span>\r\n      <span className=\"particular\">FACULTY INFORMATION</span>\r\n      {  Object.keys(data).map((x,faculty_id) => {\r\n        return(\r\n          //  typeof data[x] === 'string' && data[x].toLowerCase().includes('nan') ? '':\r\n          \r\n          fieldGroup.indexOf(x) > 0 ? '' :\r\n          <div key={faculty_id}>\r\n\r\n        <p>\r\n          \r\n        <span className=\"results-data-title\" style={{padding:'10px'}}><b>{x}</b> </span>\r\n        <span className=\"results-data-value\" style={{padding:'10px'}}> :{ data[x]}</span>\r\n      </p>\r\n      </div>\r\n      )})}\r\n<span className=\"details\">DETAILS</span>\r\n<div className=\"tab\" style={{display:'grid',gridTemplateColumns:'2fr 1fr 1fr 1fr' ,gridGap:'1rem'}}>\r\n<span className=\"particulars\" style={{color:'blue',fontWeight:'bold'}}>PARTICULARS\r\n\r\n    <  div>Faculty Action Plan</ div>\r\n    < div >Faculty FeedBack Score</  div>\r\n    < div >Faculty Reward Points</ div>\r\n    < div >Faculty Reliability Score</ div>\r\n  </span>\r\n\r\n\r\n<div><h4>2019-2020</h4>\r\n<br/>\r\n{<div className=\"task\">\r\n{\r\n  Object.keys(fieldGroup).length>0 && fieldGroup.filter((x)=>x.includes('1920')).map((x,index)=> <div key={index} style={{display:'flex', flexDirection:'column'}}>{data[x]}</div>)\r\n}\r\n</div>}\r\n</div>\r\n<div><h4>2020-2021</h4><br/>\r\n{<div className=\"task\">\r\n{\r\n  Object.keys(fieldGroup).length>0 && fieldGroup.filter((x)=>x.includes('2021')).map((x,index)=> <div key={index} style={{display:'flex', flexDirection:'column'}}>{data[x]}</div>)\r\n}\r\n</div>}\r\n</div>\r\n<div><h4>2021-2022</h4><br/>\r\n<div className=\"task\">\r\n{\r\n  Object.keys(fieldGroup).length>0 && fieldGroup.filter((x)=>x.includes('2122')).map((x,index)=> <div key={index} style={{display:'flex', flexDirection:'column'}}>{data[x]}</div>)\r\n}\r\n</div>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n    </div>\r\n    <div className=\"align\">\r\n    <button onClick={generatePdf}style={{padding:'7px 10px',margin:'auto',marginBottom:'10px',textAlign:\"center\",backgroundColor:'lightgreen',fontSize:'17px',width:\"140px\",height:\"45px\",borderRadius:\"20px\"}}>      <RiFileDownloadFill size=\"20px\"/>\r\nPDF FILE</button><br/>\r\n      <button className=\"button\" onClick={(e)=>exportToCSV(list,fileName)}style={{padding:'7px 10px',margin:'auto',textAlign:\"center\",backgroundColor:'lightblue',fontSize:'17px',height:\"45px\",width:\"140px\",borderRadius:\"20px\"}}><FcDownload size=\"25px\"/>\r\nEXCEL</button></div>\r\n    </div>\r\n  );\r\n}\r\n",{"ruleId":"52","severity":1,"message":"53","line":4,"column":8,"nodeType":"54","messageId":"55","endLine":4,"endColumn":24},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":63,"column":6,"nodeType":"62","endLine":63,"endColumn":14,"suggestions":"63"},{"ruleId":"64","severity":1,"message":"65","line":84,"column":9,"nodeType":"66","messageId":"67","endLine":84,"endColumn":54},{"ruleId":"64","severity":1,"message":"65","line":101,"column":9,"nodeType":"66","messageId":"67","endLine":101,"endColumn":47},{"ruleId":"60","severity":1,"message":"68","line":18,"column":5,"nodeType":"62","endLine":18,"endColumn":11,"suggestions":"69"},{"ruleId":"60","severity":1,"message":"70","line":21,"column":8,"nodeType":"71","endLine":21,"endColumn":42},{"ruleId":"52","severity":1,"message":"72","line":7,"column":13,"nodeType":"54","messageId":"55","endLine":7,"endColumn":22},"no-unused-vars","'MultiRangeSlider' is defined but never used.","Identifier","unusedVar","no-native-reassign",["73"],"no-negated-in-lhs",["74"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'id' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["75"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","React Hook useEffect has a missing dependency: 'updateIndex'. Either include it or remove the dependency array. If 'updateIndex' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["76"],"Assignments to the 'vals' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","'autoTable' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"77","fix":"78"},{"desc":"79","fix":"80"},"Update the dependencies array to be: [id, props, values]",{"range":"81","text":"82"},"Update the dependencies array to be: [list, updateIndex]",{"range":"83","text":"84"},[1845,1853],"[id, props, values]",[457,463],"[list, updateIndex]"]