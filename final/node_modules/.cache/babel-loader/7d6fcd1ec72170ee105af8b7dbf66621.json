{"ast":null,"code":"var _jsxFileName = \"D:\\\\dashboard\\\\front\\\\faculty-dashboard\\\\final\\\\src\\\\components\\\\Search\\\\MultiRangeSlider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState, useRef } from \"react\";\nimport PropTypes from \"prop-types\"; // import \"../../MultiRangeSlider.css\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MultiRangeSlider = props => {\n  _s();\n\n  const {\n    min,\n    max,\n    onChange,\n    id\n  } = props;\n  const [minVal, setMinVal] = useState(min);\n  const [maxVal, setMaxVal] = useState(max);\n  const minValRef = useRef(min);\n  const maxValRef = useRef(max);\n  const range = useRef(null); // Convert to percentage\n\n  const getPercent = useCallback(value => Math.round((value - min) / (max - min) * 100), [min, max]); // Set width of the range to decrease from the left side\n\n  useEffect(() => {\n    const minPercent = getPercent(minVal);\n    const maxPercent = getPercent(maxValRef.current);\n\n    if (range.current) {\n      range.current.style.left = `${minPercent}%`;\n      range.current.style.width = `${maxPercent - minPercent}%`;\n    }\n  }, [minVal, getPercent]); // Set width of the range to decrease from the right side\n\n  useEffect(() => {\n    const minPercent = getPercent(minValRef.current);\n    const maxPercent = getPercent(maxVal);\n\n    if (range.current) {\n      range.current.style.width = `${maxPercent - minPercent}%`;\n    }\n  }, [maxVal, getPercent]); // Get min and max values when their state changes\n  // useEffect(() => {\n  //   onChange({ min: minVal, max: maxVal });\n  // }, [minVal, maxVal, onChange]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-input-groups\",\n    style: {\n      width: '30%',\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'space-around'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: props['label']\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      style: {\n        width: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: min,\n        max: max,\n        value: minVal,\n        style: {\n          marginTop: '20px'\n        },\n        onChange: event => {\n          onChange(event.target.className.split(' ').slice(-1).pop(), Number(event.target.value));\n          console.log(event.target.className.split(' ').slice(-1));\n          const value = Math.min(Number(event.target.value), maxVal - props.step);\n          setMinVal(value);\n          minValRef.current = value;\n        },\n        className: `thumb thumb--left ${id}`,\n        style: {\n          zIndex: minVal > max - 100 && \"5\"\n        },\n        step: 0.1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: min,\n        max: max,\n        value: maxVal,\n        className: id,\n        onChange: event => {\n          onChange(event.target.className.split(' ').slice(-1).pop(), Number(event.target.value));\n          const value = Math.max(Number(event.target.value), minVal + props.step);\n          setMaxVal(value);\n          maxValRef.current = value;\n        },\n        step: 0.1,\n        className: `thumb thumb--right ${id}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slider\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slider__track\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: range,\n          className: \"slider__range\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slider__left-value\",\n          children: minVal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slider__right-value\",\n          children: maxVal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MultiRangeSlider, \"To0AX+fow2coG+aI6vGuXqDeI8s=\");\n\n_c = MultiRangeSlider;\nMultiRangeSlider.propTypes = {\n  min: PropTypes.number.isRequired,\n  max: PropTypes.number.isRequired,\n  onChange: PropTypes.func.isRequired\n};\nexport default MultiRangeSlider;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiRangeSlider\");","map":{"version":3,"sources":["D:/dashboard/front/faculty-dashboard/final/src/components/Search/MultiRangeSlider.js"],"names":["React","useCallback","useEffect","useState","useRef","PropTypes","MultiRangeSlider","props","min","max","onChange","id","minVal","setMinVal","maxVal","setMaxVal","minValRef","maxValRef","range","getPercent","value","Math","round","minPercent","maxPercent","current","style","left","width","display","flexDirection","justifyContent","marginTop","event","target","className","split","slice","pop","Number","console","log","step","zIndex","propTypes","number","isRequired","func"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import \"../../MultiRangeSlider.css\";\r\n\r\nconst MultiRangeSlider = (props) => {\r\n  const { min, max, onChange, id } = props\r\n  const [minVal, setMinVal] = useState(min);\r\n  const [maxVal, setMaxVal] = useState(max);\r\n  const minValRef = useRef(min);\r\n  const maxValRef = useRef(max);\r\n  const range = useRef(null);\r\n\r\n  // Convert to percentage\r\n  const getPercent = useCallback(\r\n    (value) => Math.round(((value - min) / (max - min)) * 100),\r\n    [min, max]\r\n  );\r\n\r\n  // Set width of the range to decrease from the left side\r\n  useEffect(() => {\r\n    const minPercent = getPercent(minVal);\r\n    const maxPercent = getPercent(maxValRef.current);\r\n\r\n    if (range.current) {\r\n      range.current.style.left = `${minPercent}%`;\r\n      range.current.style.width = `${maxPercent - minPercent}%`;\r\n    }\r\n  }, [minVal, getPercent]);\r\n\r\n  // Set width of the range to decrease from the right side\r\n  useEffect(() => {\r\n    const minPercent = getPercent(minValRef.current);\r\n    const maxPercent = getPercent(maxVal);\r\n\r\n    if (range.current) {\r\n      range.current.style.width = `${maxPercent - minPercent}%`;\r\n    }\r\n  }, [maxVal, getPercent]);\r\n\r\n  // Get min and max values when their state changes\r\n  // useEffect(() => {\r\n  //   onChange({ min: minVal, max: maxVal });\r\n  // }, [minVal, maxVal, onChange]);\r\n\r\n  return (\r\n    <div className=\"search-input-groups\" style={{width: '30%', display: 'flex', flexDirection: 'column', justifyContent:'space-around'}}>\r\n      <label>{props['label']}</label>\r\n    <div className=\"container\" style={{width: '100%'}} >\r\n      <input\r\n        type=\"range\"\r\n        min={min}\r\n        max={max}\r\n        value={minVal}\r\n        style={{marginTop: '20px'}}\r\n        onChange={(event) => {\r\n          onChange(event.target.className.split(' ').slice(-1).pop(), Number(event.target.value))\r\n          console.log(event.target.className.split(' ').slice(-1))\r\n          const value = Math.min(Number(event.target.value), maxVal - props.step);\r\n          setMinVal(value);\r\n          minValRef.current = value;\r\n        }}\r\n        className={`thumb thumb--left ${id}`}\r\n        style={{ zIndex: minVal > max - 100 && \"5\" }}\r\n        step= {0.1}\r\n      />\r\n      <input\r\n        type=\"range\"\r\n        min={min}\r\n        max={max}\r\n        value={maxVal}\r\n        className={id}\r\n        onChange={(event) => {\r\n          onChange(event.target.className.split(' ').slice(-1).pop(), Number(event.target.value))\r\n\r\n          const value = Math.max(Number(event.target.value), minVal + props.step);\r\n          setMaxVal(value);\r\n          maxValRef.current = value;\r\n        }}\r\n        step= {0.1}\r\n        className={`thumb thumb--right ${id}`}\r\n\r\n      />\r\n\r\n      <div className=\"slider\">\r\n        <div className=\"slider__track\" />\r\n        <div ref={range} className=\"slider__range\" />\r\n        <div className=\"slider__left-value\">{minVal}</div>\r\n        <div className=\"slider__right-value\">{maxVal}</div>\r\n      </div>\r\n    </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nMultiRangeSlider.propTypes = {\r\n  min: PropTypes.number.isRequired,\r\n  max: PropTypes.number.isRequired,\r\n  onChange: PropTypes.func.isRequired\r\n};\r\n\r\nexport default MultiRangeSlider;\r\n"]},"metadata":{},"sourceType":"module"}